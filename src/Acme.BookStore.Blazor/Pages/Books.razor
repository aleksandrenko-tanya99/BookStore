@page "/books"
@attribute [Authorize(BookStorePermissions.Books.Default)]
@using Acme.BookStore.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Acme.BookStore.Books
@using Acme.BookStore.Orders
@using Acme.BookStore.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<BookStoreResource> L
@inject AbpBlazorMessageLocalizerHelper<BookStoreResource> LH
@inject IOrderAppService OrderAppService
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateBookDto>
<div class="main_page">
    <style>
        .main_page {
            background-image: url(https://images.wallpaperscraft.com/image/book_old_pen_table_vase_rose_red_76972_1280x720.jpg);
            margin-top: -25px;
            margin-left: -210px;
            margin-right: -205px;
            height: auto;
            width: auto;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-size: cover;
        }
    </style>

    <div class="card">
        <style>

            .card {
                margin-top: 20px;
                margin-left: auto;
                margin-right: auto;
                margin-bottom: auto;
                width: 80%;
                height: 100%;
                margin-bottom: 20px;
            }
        </style>

        <div>

            <ul id="navbar">
                <li><a href="#">Adventure</a></li>
                <li><a href="#">Biography</a></li>
                <li><a href="#">Dystopia</a></li>
                <li><a href="#">Fantastic</a></li>
                <li><a href="#">Horror</a></li>
                <li><a href="#">Science</a></li>
                <li><a href="#">Science Fiction</a></li>
                <li><a href="#">Poetry</a></li>
            </ul>

        </div>
        <style>
            #navbar {
                margin-left: auto;
                margin-right: auto;
                margin: 0;
                padding: 0;
                list-style-type: none;
                border: 2px solid #d1946c;
                border-radius: 20px 5px;
                width: 100%;
                text-align: center;
                background-color: #e4c0a8;
            }

                #navbar li {
                    display: inline;
                }

                #navbar a {
                    color: #fff;
                    padding: 5px 10px;
                    text-decoration: none;
                    font-weight: bold;
                    display: inline-block;
                    width: 100px;
                }

                    #navbar a:hover {
                        border-radius: 20px 5px;
                        background-color: #9f9f9f;
                    }
        </style>
        <Card>
            <CardHeader>
                <Row Class="justify-content-between">
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <h2>@L["Books"]</h2>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsAuto">
                        @if (HasCreatePermission)
                        {
                            <Button Color="Color.Dark"
                                    Clicked="OpenCreateModalAsync">
                                @L["NewBook"]
                            </Button>
                        }
                    </Column>
                </Row>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="BookDto"
                          Data="Entities"
                          ReadData="OnDataGridReadAsync"
                          TotalItems="TotalCount"
                          ShowPager="true"
                          PageSize="PageSize">
                    <DataGridColumns>

                        <DataGridColumn TItem="BookDto"
                                        Field="@nameof(BookDto.Name)">

                            <DisplayTemplate>
                                @{
                                    <div class="name"><a href="/authors/@context.Name">@context.Name</a></div>
                                    <img src="@context.Picture" />
                                    <style>

                                        a {
                                            text-decoration: none;
                                            color: black;
                                        }

                                            a:hover {
                                                text-decoration: underline;
                                                color: black;
                                                text-decoration: none;
                                            }

                                        img {
                                            height: 300px;
                                            width: 250px;
                                        }

                                        .name {
                                            text-align: center;
                                            font-weight: bold;
                                        }

                                        .birth, .bio {
                                            text-align: left;
                                        }
                                    </style>
                                }
                            </DisplayTemplate>

                        </DataGridColumn>

                        <DataGridColumn TItem="BookDto"
                                        Field="@nameof(BookDto.AuthorName)">

                            <DisplayTemplate>
                                @{
                                    <div class="birth">
                                        <b>  Author: </b>
                                        @context.AuthorName
                                    </div>
                                    <div class="bio">
                                        <b>  Type: </b>

                                        @L[$"Enum:BookType:{(int)context.Type}"]
                                    </div>
                                    <div class="bio">
                                        <b>  PublishDate: </b>

                                        @context.PublishDate.ToShortDateString()
                                    </div>
                                    <div class="bio">
                                        <b>  Price: </b>

                                        @context.Price
                                    </div>
                                    <div class="bio">
                                        <b>  CreationTime: </b>

                                        @context.CreationTime.ToLongDateString()
                                    </div>
                                    <div class="bio">
                                        <b>  Description: </b>

                                        @context.Description
                                    </div>
                                }
                            </DisplayTemplate>

                        </DataGridColumn>

                        <DataGridEntityActionsColumn TItem="BookDto" @ref="@EntityActionsColumn">
                            <DisplayTemplate>
                                <EntityActions TItem="BookDto" EntityActionsColumn="@EntityActionsColumn">
                                    <EntityAction TItem="BookDto"
                                                  Text="@L["Edit"]"
                                                  RequiredPolicy="@UpdatePolicyName"
                                                  Clicked="() => OpenEditModalAsync(context)" />
                                    <EntityAction TItem="BookDto"
                                                  Text="@L["Delete"]"
                                                  RequiredPolicy="@DeletePolicyName"
                                                  Clicked="() => DeleteEntityAsync(context)"
                                                  ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                                    <EntityAction TItem="BookDto"
                                                  Text="@L["MakeOrder"]"
                                                  Clicked="() => CreateOrderAsync(context)" />
                                </EntityActions>
                            </DisplayTemplate>
                        </DataGridEntityActionsColumn>

                    </DataGridColumns>
                </DataGrid>
            </CardBody>
        </Card>

        <Modal @ref="@CantCreateOrderModal">
            <ModalBackdrop />
            <ModalContent IsCentered="true">
                <Form style="text-align: 'center'">
                    <ModalHeader>
                        <ModalTitle>@L["Error"]</ModalTitle>
                        <CloseButton Clicked="CloseCantCreateOrderModal" />
                    </ModalHeader>
                    <ModalBody>
                        <span>@Error</span>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Dark"
                                Clicked="CloseCantCreateOrderModal">
                            @L["Cancel"]
                        </Button>
                    </ModalFooter>
                </Form>
            </ModalContent>
        </Modal>

        <Modal @ref="@CreateModal">
            <ModalBackdrop />
            <ModalContent IsCentered="true">
                <Form>
                    <ModalHeader>
                        <ModalTitle>@L["NewBook"]</ModalTitle>
                        <CloseButton Clicked="CloseCreateModalAsync" />
                    </ModalHeader>
                    <ModalBody>
                        <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                            <Field>
                                <FieldLabel>@L["Author"]</FieldLabel>
                                <Select TValue="Guid" @bind-SelectedValue="@NewEntity.AuthorId">
                                    <SelectItem TValue="Guid" Value="Guid.Empty">@L["PickAnAuthor"]</SelectItem>
                                    @foreach (var author in authorList)
                                    {
                                        <SelectItem TValue="Guid" Value="@author.Id">
                                            @author.Name
                                        </SelectItem>
                                    }
                                </Select>
                            </Field>
                            <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["Name"]</FieldLabel>
                                    <TextEdit @bind-Text="@NewEntity.Name">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                            <Field>
                                <FieldLabel>@L["Type"]</FieldLabel>
                                <Select TValue="BookType" @bind-SelectedValue="@NewEntity.Type">
                                    @foreach (int bookTypeValue in Enum.GetValues(typeof(BookType)))
                                    {
                                        <SelectItem TValue="BookType" Value="@((BookType) bookTypeValue)">
                                            @L[$"Enum:BookType:{bookTypeValue}"]
                                        </SelectItem>
                                    }
                                </Select>
                            </Field>
                            <Field>
                                <FieldLabel>@L["PublishDate"]</FieldLabel>
                                <DateEdit TValue="DateTime" @bind-Date="NewEntity.PublishDate" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Price"]</FieldLabel>
                                <NumericEdit TValue="float" @bind-Value="NewEntity.Price" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Picture"]</FieldLabel>
                                <TextEdit @bind-text="@NewEntity.Picture" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Description"]</FieldLabel>
                                <MemoEdit Rows="5" @bind-text="@NewEntity.Description" />
                            </Field>
                        </Validations>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Dark"
                                Clicked="CloseCreateModalAsync">
                            @L["Cancel"]
                        </Button>
                        <Button Color="Color.Primary"
                                Type="@ButtonType.Submit"
                                PreventDefaultOnSubmit="true"
                                Clicked="CreateEntityAsync">
                            @L["Save"]
                        </Button>
                    </ModalFooter>
                </Form>
            </ModalContent>
        </Modal>

        <Modal @ref="@EditModal">
            <ModalBackdrop />
            <ModalContent IsCentered="true">
                <Form>
                    <ModalHeader>
                        <ModalTitle>@EditingEntity.Name</ModalTitle>
                        <CloseButton Clicked="CloseEditModalAsync" />
                    </ModalHeader>
                    <ModalBody>
                        <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                            <Field>
                                <FieldLabel>@L["Author"]</FieldLabel>
                                <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.AuthorId">
                                    @foreach (var author in authorList)
                                    {
                                        <SelectItem TValue="Guid" Value="@author.Id">
                                            @author.Name
                                        </SelectItem>
                                    }
                                </Select>
                            </Field>
                            <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["Name"]</FieldLabel>
                                    <TextEdit @bind-Text="@EditingEntity.Name">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                            <Field>
                                <FieldLabel>@L["Type"]</FieldLabel>
                                <Select TValue="BookType" @bind-SelectedValue="@EditingEntity.Type">
                                    @foreach (int bookTypeValue in Enum.GetValues(typeof(BookType)))
                                    {
                                        <SelectItem TValue="BookType" Value="@((BookType) bookTypeValue)">
                                            @L[$"Enum:BookType:{bookTypeValue}"]
                                        </SelectItem>
                                    }
                                </Select>
                            </Field>
                            <Field>
                                <FieldLabel>@L["PublishDate"]</FieldLabel>
                                <DateEdit TValue="DateTime" @bind-Date="EditingEntity.PublishDate" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Price"]</FieldLabel>
                                <NumericEdit TValue="float" @bind-Value="EditingEntity.Price" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Picture"]</FieldLabel>
                                <TextEdit @bind-text="@EditingEntity.Picture" />
                            </Field>
                            <Field>
                                <FieldLabel>@L["Description"]</FieldLabel>
                                <MemoEdit Rows="5" @bind-text="@EditingEntity.Description" />
                            </Field>
                        </Validations>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Secondary"
                                Clicked="CloseEditModalAsync">
                            @L["Cancel"]
                        </Button>
                        <Button Color="Color.Primary"
                                Type="@ButtonType.Submit"
                                PreventDefaultOnSubmit="true"
                                Clicked="UpdateEntityAsync">
                            @L["Save"]
                        </Button>
                    </ModalFooter>
                </Form>
            </ModalContent>
        </Modal>

        @code
        {
            IReadOnlyList<AuthorLookupDto> authorList = Array.Empty<AuthorLookupDto>();

            Modal CantCreateOrderModal;
            string Error;

            public Books() // Constructor
            {
                CreatePolicyName = BookStorePermissions.Books.Create;
                UpdatePolicyName = BookStorePermissions.Books.Edit;
                DeletePolicyName = BookStorePermissions.Books.Delete;
            }

            protected override async Task OnInitializedAsync()
            {
                await base.OnInitializedAsync();
                authorList = (await AppService.GetAuthorLookupAsync()).Items;
            }

            protected void CloseCantCreateOrderModal()
            {
                CantCreateOrderModal.Hide();
            }


            protected async void CreateOrderAsync(BookDto book)
            {
                var args = new CreateOrderDto() { UserId = (Guid)CurrentUser.Id, BookId = book.Id };
                var existentOrder = await OrderAppService.GetOrderByContentAsync(args);
                if (existentOrder == null)
                    await OrderAppService.CreateAsync(args);
                else
                {
                    Error = "You can't order same book twice!";
                    CantCreateOrderModal.Show();
                }
            }
        }
    </div>
</div>